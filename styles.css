*,
*::before,
*::after {
  /* margin: 0;
  padding: 0; */
  box-sizing: inherit;
}

html {
  box-sizing: border-box;
}

body {
  font-family: Arial;
  background-color: hsl(240, 3%, 7%);
  display: flex;
  flex-direction: column;
  min-height: 100vh; /*use min-height in body as always*/
  margin: 0;
  padding: 1em; /*padding size chagnes according to the font-size of the current element*/
  /* em are relative to parent font-size, if used to specify font-size,
  em are relative to the current font-size, if usd to specify lengths */
  font-size: clamp(0.5rem, 2.5vmin, 1.5rem);
  /* While vh and vm are always related to the viewport height and width, respectively, vmin and vmax are related to the maximum or minimum of those widths and heights, depending on which is smaller and larger. */
  /* For example, if the browser was set to 1100px wide and the 700px tall, 1vmin would be 7px and 1vmax would be 11px. */
  /* 2.5vmin means whatever is smaller, the width or the length, the font-size will be 2.5% of that */
}

.keyboard {
  display: grid;
  grid-template-columns: repeat(20, minmax(auto, 1.25em));
  /* each key button takes up 2 columns, and each spacing area takes 1, and each large key button takes 3*/
  /*minmax, min = auto, the smallest it can be, so its just going to fill up as much space as possible when screen gets really small, - having minmax is for when the screen gets so small and the font can't get scale down small enough */
  grid-auto-rows: 3em;
  gap: 0.25rem;
  justify-content: center; /*justify-content (align-content) controls the overall grid area layout */
  /*justify-items (align-items) controls the individual children layout vertially (like main-axis), default is stretch, same as align-items */
}

.key {
  font-size: inherit;
  grid-column: span 2; /* grid-column: 2/5 from line 2 to line 5 */
  /* grid-column: span 2, takes up 2 column */
  border: none;
  padding: 0; /*deafult padding of a button is vertically 1, horizontally 6*/
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: hsl(
    var(--hue, 200),
    var(--saturation, 1%),
    calc(var(--lightness, 51%) + var(--lightness-offset, 0%))
  );
  /* background-color: rgba(
    var(--red, 255),
    var(--green, 0),
    var(--blue, 0),
    calc(var(--alpha, 0.2) + var(--lightness-offset, 0))
  ); */
  color: #fff;
  text-transform: uppercase;
  border-radius: 0.25em;
  user-select: none;
  cursor: pointer;
}

.key.large {
  grid-column: span 3;
}

.space {
  grid-column: span 0.5;
}

.key:hover,
.key:focus {
  --lightness-offset: 10%;
  /* --lightness-offset: 0.3; */
}

.key.wrong {
  --lightness: 23%;
  /* --alpha: 0.05; */
}

.key.wrong-location {
  --hue: 49;
  --saturation: 51%;
  --lightness: 47%;
}

.key.correct {
  --hue: 115;
  --saturation: 29%;
  --lightness: 43%;
}

/*======================================*/

.guess-grid {
  display: grid;
  justify-content: center;
  align-content: center;
  flex-grow: 1;
  grid-template-columns: repeat(5, 4em);
  grid-template-rows: repeat(6, 4em);
  gap: 0.25em;
  margin-bottom: 1em;
}

.tile {
  font-size: 2em;
  color: #fff;
  border: 0.05em solid hsl(240, 2%, 23%);
  text-transform: uppercase;
  display: flex;
  justify-content: center;
  align-items: center;
  font-weight: bold;
  user-select: none;
  transition: transform 250ms linear; /* duration is the half of the FLIP_ANIMATION_DURATION */
}

.tile.shake {
  animation: shake 250ms ease-in-out;
}

@keyframes shake {
  10% {
    transform: translateX(-5%);
  }

  30% {
    transform: translateX(5%);
  }

  50% {
    transform: translateX(-7.5%);
  }

  70% {
    transform: translateX(7.5%);
  }

  90% {
    transform: translateX(-5%);
  }
}

.tile.flip {
  transform: rotateX(90deg);
}

.tile.dance {
  animation: dance 500ms ease-in-out;
}

@keyframes dance {
  20% {
    transform: translateY(-50%);
  }

  40% {
    transform: translateY(5%);
  }

  60% {
    transform: translateY(-25%);
  }

  80% {
    transform: translateY(2.5%);
  }

  90% {
    transform: translateY(-5%);
  }

  100% {
    transform: translateY(0);
  }
}

.tile[data-state="active"] {
  border-color: hsl(200, 1%, 34%);
}

.tile[data-state="wrong"] {
  border: none;
  background-color: hsl(240, 2%, 23%);
}

.tile[data-state="wrong-location"] {
  border: none;
  background-color: hsl(49, 51%, 47%);
}

.tile[data-state="correct"] {
  border: none;
  background-color: hsl(115, 29%, 43%);
}

.alert-container {
  position: fixed;
  top: 10vh;
  left: 50vw;
  transform: translateX(-50%);
  z-index: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.alert {
  pointer-events: none;
  background-color: hsla(204, 6%, 85%, 0.75);
  padding: 0.75em;
  border-radius: 0.25em;
  opacity: 1;
  transition: opacity 500ms ease-in-out;
  margin-bottom: 0.5em;
}

.alert:last-child {
  margin-bottom: 0;
}

.alert.hidden {
  opacity: 0;
}
